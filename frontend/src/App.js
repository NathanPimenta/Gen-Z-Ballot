import React, { useState, useEffect } from 'react';
import { ethers } from 'ethers';
import './App.css';

// Import contract ABIs and addresses (these will be generated by deployment script)
import {
  CONTRACT_ADDRESSES,
  ELECTIONOFFICER_ABI,
  VOTER_ABI,
  CANDIDATE_ABI,
  GENERALELECTIONS_ABI
} from './contracts';

// Hardhat default accounts with private keys
const HARDHAT_ACCOUNTS = [
  {
    address: "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    privateKey: "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80",
    role: "Election Commissioner"
  },
  {
    address: "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    privateKey: "0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d",
    role: "Election Officer 1"
  },
  {
    address: "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC",
    privateKey: "0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a",
    role: "Election Officer 2"
  },
  {
    address: "0x90F79bf6EB2c4f870365E785982E1f101E93b906",
    privateKey: "0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6",
    role: "Election Officer 3"
  },
  {
    address: "0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65",
    privateKey: "0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a",
    role: "Voter 1"
  },
  {
    address: "0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc",
    privateKey: "0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba",
    role: "Voter 2"
  },
  {
    address: "0x976EA74026E726554dB657fA54763abd0C3a0aa9",
    privateKey: "0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e",
    role: "Candidate 1"
  },
  {
    address: "0x14dC79964da2C08b23698B3D3cc7Ca32193d9955",
    privateKey: "0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356",
    role: "Candidate 2"
  }
];

function App() {
  const [provider, setProvider] = useState(null);
  const [currentAccount, setCurrentAccount] = useState(HARDHAT_ACCOUNTS[0]);
  const [contracts, setContracts] = useState({});
  const [activeTab, setActiveTab] = useState('voter');
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Form states
  const [voterForm, setVoterForm] = useState({
    name: '',
    age: '',
    aadharNumber: '',
    voterIdNumber: '',
    constituencyId: ''
  });

  const [candidateForm, setCandidateForm] = useState({
    name: '',
    politicalParty: '',
    age: '',
    constituencyId: '',
    securityDeposit: '1'
  });

  const [voters, setVoters] = useState([]);
  const [candidates, setCandidates] = useState([]);

  useEffect(() => {
    initializeProvider();
  }, []);

  useEffect(() => {
    if (provider && currentAccount) {
      initializeContracts();
    }
  }, [provider, currentAccount]);

  const initializeProvider = async () => {
    try {
      const jsonRpcProvider = new ethers.JsonRpcProvider("http://127.0.0.1:8545");
      setProvider(jsonRpcProvider);
    } catch (err) {
      setError('Failed to connect to Hardhat node. Make sure it\'s running on http://127.0.0.1:8545');
    }
  };

  const initializeContracts = async () => {
    try {
      const wallet = new ethers.Wallet(currentAccount.privateKey, provider);
      
      const electionOfficer = new ethers.Contract(
        CONTRACT_ADDRESSES.electionOfficer,
        ELECTIONOFFICER_ABI,
        wallet
      );
      
      const voter = new ethers.Contract(
        CONTRACT_ADDRESSES.voter,
        VOTER_ABI,
        wallet
      );
      
      const candidate = new ethers.Contract(
        CONTRACT_ADDRESSES.candidate,
        CANDIDATE_ABI,
        wallet
      );
      
      const generalElections = new ethers.Contract(
        CONTRACT_ADDRESSES.generalElections,
        GENERALELECTIONS_ABI,
        wallet
      );

      setContracts({
        electionOfficer,
        voter,
        candidate,
        generalElections
      });

      // Set up event listeners
      setupEventListeners({ voter, candidate, generalElections });
      
      // Load initial data
      loadVoters(voter);
      loadCandidates(candidate);
      
    } catch (err) {
      console.error('Contract initialization error:', err);
      setError('Failed to initialize contracts. Make sure they are deployed.');
    }
  };

  const setupEventListeners = ({ voter, candidate, generalElections }) => {
    // Voter events
    voter.on('VoterRegistered', (voterAddress, name, constituencyId) => {
      addEvent('VoterRegistered', { voterAddress, name, constituencyId });
      loadVoters(voter);
    });

    voter.on('VoterVerified', (voterAddress, isVerified) => {
      addEvent('VoterVerified', { voterAddress, isVerified });
      loadVoters(voter);
    });

    // Candidate events
    candidate.on('CandidateRegistered', (candidateAddress, name, constituencyId) => {
      addEvent('CandidateRegistered', { candidateAddress, name, constituencyId });
      loadCandidates(candidate);
    });

    candidate.on('CandidateVerified', (candidateAddress, isVerified) => {
      addEvent('CandidateVerified', { candidateAddress, isVerified });
      loadCandidates(candidate);
    });

    // Vote events
    generalElections.on('VoteCast', (voterAddress, voterId, candidateId, constituencyId) => {
      addEvent('VoteCast', { voterAddress, voterId, candidateId, constituencyId });
    });
  };

  const addEvent = (type, data) => {
    const event = {
      type,
      data,
      timestamp: new Date().toLocaleTimeString()
    };
    setEvents(prev => [event, ...prev.slice(0, 49)]); // Keep last 50 events
  };

  const loadVoters = async (voterContract) => {
    try {
      const voterCount = await voterContract.voterCount();
      const voterList = [];
      
      for (let i = 1; i <= voterCount; i++) {
        try {
          const voterDetails = await voterContract.getVoterDetails(i);
          voterList.push({
            id: i,
            name: voterDetails.name,
            age: voterDetails.age.toString(),
            constituencyId: voterDetails.constituencyId.toString(),
            hasVoted: voterDetails.hasVoted,
            isAllowedToVote: voterDetails.isAllowedToVote,
            hasRegistered: voterDetails.hasRegistered
          });
        } catch (err) {
          console.log(`Voter ${i} not found or error:`, err.message);
        }
      }
      
      setVoters(voterList);
    } catch (err) {
      console.error('Error loading voters:', err);
    }
  };

  const loadCandidates = async (candidateContract) => {
    try {
      const candidateCount = await candidateContract.totalCandidates();
      const candidateList = [];
      
      for (let i = 1; i <= candidateCount; i++) {
        try {
          const candidateDetails = await candidateContract.getCandidateDetails(i);
          candidateList.push({
            id: i,
            name: candidateDetails.name,
            politicalParty: candidateDetails.politicalParty,
            age: candidateDetails.age.toString(),
            constituencyId: candidateDetails.constituencyId.toString(),
            canContest: candidateDetails.canContest,
            isVerified: candidateDetails.isVerified
          });
        } catch (err) {
          console.log(`Candidate ${i} not found or error:`, err.message);
        }
      }
      
      setCandidates(candidateList);
    } catch (err) {
      console.error('Error loading candidates:', err);
    }
  };

  const handleAccountChange = (accountIndex) => {
    setCurrentAccount(HARDHAT_ACCOUNTS[accountIndex]);
  };

  const registerVoter = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const aadharBytes = ethers.encodeBytes32String(voterForm.aadharNumber).slice(0, 26); // Convert to bytes12
      
      const tx = await contracts.voter.registerAsVoter(
        voterForm.name,
        parseInt(voterForm.age),
        aadharBytes,
        voterForm.voterIdNumber,
        parseInt(voterForm.constituencyId)
      );
      
      await tx.wait();
      setSuccess('Voter registered successfully!');
      setVoterForm({ name: '', age: '', aadharNumber: '', voterIdNumber: '', constituencyId: '' });
    } catch (err) {
      setError(`Registration failed: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const registerCandidate = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const depositAmount = ethers.parseEther(candidateForm.securityDeposit);
      
      const tx = await contracts.candidate.candidateRegistration(
        currentAccount.address,
        candidateForm.name,
        candidateForm.politicalParty,
        parseInt(candidateForm.securityDeposit),
        parseInt(candidateForm.age),
        parseInt(candidateForm.constituencyId),
        { value: depositAmount }
      );
      
      await tx.wait();
      setSuccess('Candidate registered successfully!');
      setCandidateForm({ name: '', politicalParty: '', age: '', constituencyId: '', securityDeposit: '1' });
    } catch (err) {
      setError(`Registration failed: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const verifyVoter = async (voterAddress, aadharNumber, voterIdNumber) => {
    setLoading(true);
    setError('');

    try {
      const aadharBytes = ethers.encodeBytes32String(aadharNumber).slice(0, 26);
      
      const tx = await contracts.voter.verifyVoters(
        voterAddress,
        aadharBytes,
        voterIdNumber,
        true
      );
      
      await tx.wait();
      setSuccess('Voter verified successfully!');
    } catch (err) {
      setError(`Verification failed: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const verifyCandidate = async (candidateAddress) => {
    setLoading(true);
    setError('');

    try {
      const tx = await contracts.candidate.candidateVerification(candidateAddress, true);
      await tx.wait();
      setSuccess('Candidate verified successfully!');
    } catch (err) {
      setError(`Verification failed: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const castVote = async (candidateId) => {
    setLoading(true);
    setError('');

    try {
      // Find current user's voter ID
      const currentVoter = voters.find(v => 
        // This is a simplified approach - in a real app, you'd have better voter-address mapping
        v.name.toLowerCase().includes(currentAccount.role.toLowerCase())
      );
      
      if (!currentVoter) {
        throw new Error('Current account is not registered as a voter');
      }

      const tx = await contracts.generalElections.registerVote(
        currentVoter.id,
        candidateId
      );
      
      await tx.wait();
      setSuccess('Vote cast successfully!');
    } catch (err) {
      setError(`Voting failed: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  if (!provider) {
    return (
      <div className="container">
        <div className="loading">
          <h2>Connecting to Hardhat...</h2>
          <p>Make sure Hardhat node is running on http://127.0.0.1:8545</p>
        </div>
      </div>
    );
  }

  return (
    <div className="App">
      <div className="header">
        <div className="container">
          <h1>Decentralized Voting System</h1>
          <p>Blockchain-based transparent voting with Hardhat integration</p>
        </div>
      </div>

      <div className="container">
        {/* Account Selector */}
        <div className="card">
          <h3>Account Selection</h3>
          <div className="account-selector">
            <label>Select Account:</label>
            <select 
              value={HARDHAT_ACCOUNTS.indexOf(currentAccount)} 
              onChange={(e) => handleAccountChange(parseInt(e.target.value))}
            >
              {HARDHAT_ACCOUNTS.map((account, index) => (
                <option key={index} value={index}>
                  {account.role} - {account.address.slice(0, 10)}...
                </option>
              ))}
            </select>
          </div>
          <div className="account-info">
            <div><strong>Role:</strong> {currentAccount.role}</div>
            <div><strong>Address:</strong> {currentAccount.address}</div>
          </div>
        </div>

        {/* Error/Success Messages */}
        {error && <div className="error">{error}</div>}
        {success && <div className="success">{success}</div>}

        {/* Main Tabs */}
        <div className="card">
          <div className="tabs">
            <button 
              className={`tab ${activeTab === 'voter' ? 'active' : ''}`}
              onClick={() => setActiveTab('voter')}
            >
              Voter Registration
            </button>
            <button 
              className={`tab ${activeTab === 'candidate' ? 'active' : ''}`}
              onClick={() => setActiveTab('candidate')}
            >
              Candidate Registration
            </button>
            <button 
              className={`tab ${activeTab === 'voting' ? 'active' : ''}`}
              onClick={() => setActiveTab('voting')}
            >
              Voting
            </button>
            <button 
              className={`tab ${activeTab === 'verification' ? 'active' : ''}`}
              onClick={() => setActiveTab('verification')}
            >
              Verification
            </button>
            <button 
              className={`tab ${activeTab === 'events' ? 'active' : ''}`}
              onClick={() => setActiveTab('events')}
            >
              Event Log
            </button>
          </div>

          {/* Voter Registration Tab */}
          {activeTab === 'voter' && (
            <div>
              <h3>Register as Voter</h3>
              <form onSubmit={registerVoter}>
                <div className="form-group">
                  <label>Name:</label>
                  <input
                    type="text"
                    value={voterForm.name}
                    onChange={(e) => setVoterForm({...voterForm, name: e.target.value})}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Age:</label>
                  <input
                    type="number"
                    value={voterForm.age}
                    onChange={(e) => setVoterForm({...voterForm, age: e.target.value})}
                    min="18"
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Aadhar Number:</label>
                  <input
                    type="text"
                    value={voterForm.aadharNumber}
                    onChange={(e) => setVoterForm({...voterForm, aadharNumber: e.target.value})}
                    maxLength="12"
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Voter ID Number:</label>
                  <input
                    type="text"
                    value={voterForm.voterIdNumber}
                    onChange={(e) => setVoterForm({...voterForm, voterIdNumber: e.target.value})}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Constituency ID:</label>
                  <select
                    value={voterForm.constituencyId}
                    onChange={(e) => setVoterForm({...voterForm, constituencyId: e.target.value})}
                    required
                  >
                    <option value="">Select Constituency</option>
                    <option value="1">Constituency 1</option>
                    <option value="2">Constituency 2</option>
                    <option value="3">Constituency 3</option>
                  </select>
                </div>
                <button type="submit" className="btn" disabled={loading}>
                  {loading ? 'Registering...' : 'Register Voter'}
                </button>
              </form>

              <h4>Registered Voters</h4>
              <ul className="voter-list">
                {voters.map(voter => (
                  <li key={voter.id} className="voter-item">
                    <div className="voter-info">
                      <div className="voter-name">{voter.name}</div>
                      <div className="voter-details">
                        Age: {voter.age} | Constituency: {voter.constituencyId} | 
                        <span className={`status-badge ${voter.isAllowedToVote ? 'status-verified' : 'status-pending'}`}>
                          {voter.isAllowedToVote ? 'Verified' : 'Pending'}
                        </span>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          )}

          {/* Candidate Registration Tab */}
          {activeTab === 'candidate' && (
            <div>
              <h3>Register as Candidate</h3>
              <form onSubmit={registerCandidate}>
                <div className="form-group">
                  <label>Name:</label>
                  <input
                    type="text"
                    value={candidateForm.name}
                    onChange={(e) => setCandidateForm({...candidateForm, name: e.target.value})}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Political Party:</label>
                  <input
                    type="text"
                    value={candidateForm.politicalParty}
                    onChange={(e) => setCandidateForm({...candidateForm, politicalParty: e.target.value})}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Age:</label>
                  <input
                    type="number"
                    value={candidateForm.age}
                    onChange={(e) => setCandidateForm({...candidateForm, age: e.target.value})}
                    min="25"
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Constituency ID:</label>
                  <select
                    value={candidateForm.constituencyId}
                    onChange={(e) => setCandidateForm({...candidateForm, constituencyId: e.target.value})}
                    required
                  >
                    <option value="">Select Constituency</option>
                    <option value="1">Constituency 1</option>
                    <option value="2">Constituency 2</option>
                    <option value="3">Constituency 3</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>Security Deposit (ETH):</label>
                  <input
                    type="number"
                    value={candidateForm.securityDeposit}
                    onChange={(e) => setCandidateForm({...candidateForm, securityDeposit: e.target.value})}
                    min="1"
                    step="0.1"
                    required
                  />
                </div>
                <button type="submit" className="btn" disabled={loading}>
                  {loading ? 'Registering...' : 'Register Candidate'}
                </button>
              </form>

              <h4>Registered Candidates</h4>
              <ul className="candidate-list">
                {candidates.map(candidate => (
                  <li key={candidate.id} className="candidate-item">
                    <div className="candidate-info">
                      <div className="candidate-name">{candidate.name}</div>
                      <div className="candidate-details">
                        {candidate.politicalParty} | Age: {candidate.age} | Constituency: {candidate.constituencyId} | 
                        <span className={`status-badge ${candidate.canContest ? 'status-verified' : 'status-pending'}`}>
                          {candidate.canContest ? 'Verified' : 'Pending'}
                        </span>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          )}

          {/* Voting Tab */}
          {activeTab === 'voting' && (
            <div>
              <h3>Cast Your Vote</h3>
              <p>Select a candidate from your constituency to vote for:</p>
              
              <ul className="candidate-list">
                {candidates.filter(c => c.canContest).map(candidate => (
                  <li key={candidate.id} className="candidate-item">
                    <div className="candidate-info">
                      <div className="candidate-name">{candidate.name}</div>
                      <div className="candidate-details">
                        {candidate.politicalParty} | Constituency: {candidate.constituencyId}
                      </div>
                    </div>
                    <button 
                      className="btn btn-success vote-button"
                      onClick={() => castVote(candidate.id)}
                      disabled={loading}
                    >
                      Vote
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          )}

          {/* Verification Tab */}
          {activeTab === 'verification' && (
            <div>
              <h3>Verify Voters and Candidates</h3>
              <p><strong>Current Role:</strong> {currentAccount.role}</p>
              
              {currentAccount.role.includes('Officer') && (
                <div>
                  <h4>Pending Voter Verifications</h4>
                  <ul className="voter-list">
                    {voters.filter(v => !v.isAllowedToVote).map(voter => (
                      <li key={voter.id} className="voter-item">
                        <div className="voter-info">
                          <div className="voter-name">{voter.name}</div>
                          <div className="voter-details">
                            Age: {voter.age} | Constituency: {voter.constituencyId}
                          </div>
                        </div>
                        <button 
                          className="btn btn-success"
                          onClick={() => verifyVoter(
                            HARDHAT_ACCOUNTS.find(acc => acc.role.includes('Voter'))?.address || '',
                            '123456789012', // Mock aadhar
                            'VOTER001' // Mock voter ID
                          )}
                          disabled={loading}
                        >
                          Verify
                        </button>
                      </li>
                    ))}
                  </ul>

                  <h4>Pending Candidate Verifications</h4>
                  <ul className="candidate-list">
                    {candidates.filter(c => !c.canContest).map(candidate => (
                      <li key={candidate.id} className="candidate-item">
                        <div className="candidate-info">
                          <div className="candidate-name">{candidate.name}</div>
                          <div className="candidate-details">
                            {candidate.politicalParty} | Constituency: {candidate.constituencyId}
                          </div>
                        </div>
                        <button 
                          className="btn btn-success"
                          onClick={() => verifyCandidate(
                            HARDHAT_ACCOUNTS.find(acc => acc.role.includes('Candidate'))?.address || ''
                          )}
                          disabled={loading}
                        >
                          Verify
                        </button>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              
              {!currentAccount.role.includes('Officer') && (
                <p>Only Election Officers can verify voters and candidates.</p>
              )}
            </div>
          )}

          {/* Events Tab */}
          {activeTab === 'events' && (
            <div>
              <h3>Event Log</h3>
              <div className="event-log">
                {events.length === 0 ? (
                  <div className="event-item">No events yet</div>
                ) : (
                  events.map((event, index) => (
                    <div key={index} className="event-item">
                      <span className="event-type">{event.type}</span> - {event.timestamp}
                      <br />
                      <small>{JSON.stringify(event.data, null, 2)}</small>
                    </div>
                  ))
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default App;